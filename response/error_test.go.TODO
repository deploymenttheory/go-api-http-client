package response

import (
	"bytes"
	"io"
	"net/http"
	"net/url"
	"strings"
	"testing"

	"github.com/deploymenttheory/go-api-http-client/mocklogger"
)

func TestParseHTMLResponse(t *testing.T) {
	// Define test cases
	testCases := []struct {
		name     string
		html     string
		expected string
	}{
		{
			name:     "Single paragraph with text",
			html:     `<html><body><p>Test paragraph</p></body></html>`,
			expected: "Test paragraph",
		},
		{
			name:     "Paragraph with link",
			html:     `<html><body><p>Visit <a href="https://example.com">Example</a></p></body></html>`,
			expected: `Visit [Link: https://example.com]`,
		},
		// Add more test cases as needed...
	}

	// Iterate over test cases
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			mockLog := mocklogger.NewMockLogger()

			// Simulate an HTTP response
			resp := &http.Response{
				StatusCode: http.StatusOK,
				Body:       io.NopCloser(bytes.NewBufferString(tc.html)),
				Request: &http.Request{
					Method: "GET",
					URL:    &url.URL{Path: "https://example.com"},
				},
			}

			// Create a new APIError instance
			apiError := &APIError{}

			// Read the response body bytes
			bodyBytes, _ := io.ReadAll(resp.Body)

			// Call parseHTMLResponse
			parseHTMLResponse(bodyBytes, apiError, mockLog, resp)

			// Assert the results
			if !strings.Contains(apiError.Message, tc.expected) {
				t.Errorf("Expected message to contain %q, got %q", tc.expected, apiError.Message)
			}
		})
	}
}
